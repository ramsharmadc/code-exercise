.#  codec_c.gsl
.#
.#  Generates a codec for simple frame-based protocols like Majordomo.
.#  This is a stripped-down codec generator that you can expand for your
.#  own protocol designs. Look at mdp_client.xml and mdp_worker.xml for
.#  examples of protocol models. You might want to extend the range of 
.#  types, for example.
.#
.#  This codec generates C; it should be fairly simple to change it to
.#  produce other languages.
.#
.echo "Generating $(class.name).h..."
.output "$(class.name).h"
/*  =========================================================================
    $(class.name).h

    Generated codec header for $(class.name)
    =========================================================================
*/

#ifndef __$(CLASS.NAME)_H_INCLUDED__
#define __$(CLASS.NAME)_H_INCLUDED__

/*  These are the $(class.name) messages
.for message
.   message.name = "$(message.name:c)"

    $(NAME) - $(string.trim (.?''):left)
.   for field
.       field.name = "$(field.name:c)"
.       for class.field as cfield where cfield.name = field.name
.           if cfield.type <> field.type
.               echo "E: field '$(name)' must have same type everywhere"
.           endif
.       else
.           copy field to class
.       endfor
        $(name)       $(type) \
.       if defined (size)
[$(size)]
.       else

.       endif
.   endfor
.endfor
*/

.for message where defined (id)
.   class.uses_ids = 1
#define $(CLASS.NAME)_$(MESSAGE.NAME)   $(id)
.endfor

#ifdef __cplusplus
extern "C" {
#endif

//  Opaque class structure
typedef struct _$(class.name)_t $(class.name)_t;

//  Create a new $(class.name)
.if class.uses_ids ?= 1
$(class.name)_t *
    $(class.name)_new (int id);
.else
$(class.name)_t *
    $(class.name)_new (void);
.endif

//  Destroy the $(class.name)
void
    $(class.name)_destroy ($(class.name)_t **self_p);

//  Receive and parse a $(class.name) from the socket
$(class.name)_t *
    $(class.name)_recv (void *socket);

//  Send the $(class.name) to the socket, and destroy it
int
    $(class.name)_send ($(class.name)_t **self_p, void *socket);

//  Get/set the message address
zframe_t *
    $(class.name)_address ($(class.name)_t *self);
void
    $(class.name)_address_set ($(class.name)_t *self, zframe_t *address);

.if class.uses_ids ?= 1
//  Get/set the $(class.name) id
int
    $(class.name)_id ($(class.name)_t *self);
void
    $(class.name)_id_set ($(class.name)_t *self, int id);
    
.endif
.for class.field where !defined (value)
.   if type = "octet"
//  Get/set the $(name) field
byte
    $(class.name)_$(name) ($(class.name)_t *self);
void
    $(class.name)_$(name)_set ($(class.name)_t *self, byte $(name));
.#
.   elsif type = "string"
//  Get/set the $(name) field
char *
    $(class.name)_$(name) ($(class.name)_t *self);
void
    $(class.name)_$(name)_set ($(class.name)_t *self, char *format, ...);
.#
.   elsif type = "frame"
//  Get/set the $(name) field
zframe_t *
    $(class.name)_$(name) ($(class.name)_t *self);
void
    $(class.name)_$(name)_set ($(class.name)_t *self, zframe_t *frame);
.#
.   else
.       echo "E: unknown type '$(type)' for field '$(name)'"
.   endif

.endfor
//  Self test of this class
int
    $(class.name)_test (bool verbose);

#ifdef __cplusplus
}
#endif

#endif
.echo "Generating $(class.name).c..."
.output "$(class.name).c"
/*  =========================================================================
    $(class.name).c

    Generated codec implementation for $(class.name)
    =========================================================================
*/

#include <czmq.h>
#include "$(class.name).h"

//  Structure of our class

struct _$(class.name)_t {
    int id;                     //  $(class.name) message ID
    zframe_t *address;          //  Sender address if any
.for class.field
.   if type = "octet"
    byte $(name);
.   elsif type = "string"
    char *$(name);
.   elsif type = "frame"
    zframe_t *$(name);
.   endif
.endfor
};


//  --------------------------------------------------------------------------
//  Create a new $(class.name)

$(class.name)_t *
.if class.uses_ids ?= 1
$(class.name)_new (int id)
.else
$(class.name)_new (void)
.endif
{
    $(class.name)_t *self = ($(class.name)_t *) zmalloc (sizeof ($(class.name)_t));
.if class.uses_ids ?= 1
    self->id = id;
.endif
    return self;
}


//  --------------------------------------------------------------------------
//  Destroy the $(class.name)

void
$(class.name)_destroy ($(class.name)_t **self_p)
{
    assert (self_p);
    if (*self_p) {
        $(class.name)_t *self = *self_p;

        //  Free class properties
        zframe_destroy (&self->address);
.for class.field
.   if type = "string"
        free (self->$(name));
.   elsif type = "frame"
        zframe_destroy (&self->$(name));
.   endif
.endfor
        //  Free object itself
        free (self);
        *self_p = NULL;
    }
}


//  --------------------------------------------------------------------------
//  Receive and parse a $(class.name) from the socket. Returns new object or
//  NULL if error. Will block if there's no message waiting.

$(class.name)_t *
$(class.name)_recv (void *socket)
{
    //  Read all frames off socket
    assert (socket);
    zmsg_t *msg = zmsg_recv (socket);
    if (!msg)
        return NULL;            //  Interrupted

    //  Create and populate new $(class.name) instance
.if class.uses_ids ?= 1
    $(class.name)_t *self = $(class.name)_new (0);
.else
    $(class.name)_t *self = $(class.name)_new ();
.endif
    
    //  If we're reading from a ROUTER socket, get address
    if (zsocket_type (socket) == ZMQ_ROUTER) {
        self->address = zmsg_pop (msg);
        if (!self->address)
            goto empty;         //  Interrupted
    }
    //  Read and check header
.for class->header.field
    zframe_t *$(name)_frame = zmsg_pop (msg);
.   if defined (value)
    if (!$(name)_frame || !zframe_streq ($(name)_frame, "$(value:)"))
        goto malformed;
.   else
    if (!$(name)_frame)
        goto malformed;
.   endif
.   if name = "id"
    self->id = zframe_data (id_frame) [0];
.   endif
    zframe_destroy (&$(name)_frame);

.endfor
.if class.uses_ids ?= 1
    //  Read and parse fields per-message
    switch (self->id) {
.for class.message
        case $(CLASS.NAME)_$(MESSAGE.NAME):
.   for field
.       if type = "string"
            self->$(name) = zmsg_popstr (msg);
.       elsif type = "frame"
            self->$(name) = zmsg_pop (msg);
.       endif
            if (!self->$(name))
                goto malformed;
.   endfor
            break;
            
.endfor
        default:
            goto malformed;
    }
.else
    //  All messages have the same structure
.   for class->message.field
.       if type = "string"
    self->$(name) = zmsg_popstr (msg);
.       elsif type = "frame"
    self->$(name) = zmsg_pop (msg);
.       endif
    if (!self->$(name))
        goto malformed;
.   endfor

.endif
    //  Successful return
    zmsg_destroy (&msg);
    return self;

    //  Error returns
    malformed:
        printf ("E: malformed message '%d'\\n", self->id);
    empty:
        zmsg_destroy (&msg);
        $(class.name)_destroy (&self);
        return (NULL);
}


//  --------------------------------------------------------------------------
//  Send the $(class.name) to the socket, and destroy it

int
$(class.name)_send ($(class.name)_t **self_p, void *socket)
{
    assert (socket);
    assert (self_p);
    assert (*self_p);
    $(class.name)_t *self = *self_p;

    //  If we're sending to a ROUTER, we send the address first
    zmsg_t *msg = zmsg_new ();
    if (zsocket_type (socket) == ZMQ_ROUTER) {
        assert (self->address);
        zmsg_add (msg, self->address);
        self->address = NULL;       //  Owned by msg now
    }
    //  Send header fields
.for class->header.field
.   if defined (value)
    zmsg_addstr (msg, "$(value:)");
.   elsif type = "string"
    zmsg_addstr (msg, self->$(name));
.   elsif type = "octet"
    zmsg_addmem (msg, &self->$(name), 1);
.   endif
.endfor

.if class.uses_ids ?= 1
    switch (self->id) {
.for class.message
        case $(CLASS.NAME)_$(MESSAGE.NAME):
.   for field
.       if type = "string"
            zmsg_addstr (msg, self->$(name));
.       elsif type = "frame"
            zmsg_add (msg, self->$(name));
            self->$(name) = NULL;
.       endif
.   endfor
            break;
.endfor
    }
.else
    //  All messages have the same structure
.   for class->message.field
.       if type = "string"
    zmsg_addstr (msg, self->$(name));
.       elsif type = "frame"
    zmsg_add (msg, self->$(name));
    self->$(name) = NULL;
.       endif
.   endfor

.endif
    //  Send the message and destroy $(class.name) object
    int rc = zmsg_send (&msg, socket);
    $(class.name)_destroy (self_p);
    return rc;
}


//  --------------------------------------------------------------------------
//  Get/set the message address

zframe_t *
$(class.name)_address ($(class.name)_t *self)
{
    assert (self);
    return self->address;
}

void
$(class.name)_address_set ($(class.name)_t *self, zframe_t *address)
{
    if (self->address)
        zframe_destroy (&self->address);
    self->address = zframe_dup (address);
}


.if class.uses_ids ?= 1
//  --------------------------------------------------------------------------
//  Get/set the $(class.name) id

int
$(class.name)_id ($(class.name)_t *self)
{
    assert (self);
    return self->id;
}

void
$(class.name)_id_set ($(class.name)_t *self, int id)
{
    self->id = id;
}


.endif
.for class.field where !defined (value)
.   if type = "octet"
//  --------------------------------------------------------------------------
//  Get/set the $(name) field

byte
$(class.name)_$(name) ($(class.name)_t *self)
{
    assert (self);
    return self->$(name);
}

void
$(class.name)_$(name)_set ($(class.name)_t *self, byte $(name))
{
    assert (self);
    self->$(name) = $(name);
}

.   elsif type = "string"
//  --------------------------------------------------------------------------
//  Get/set the $(name) field

char *
$(class.name)_$(name) ($(class.name)_t *self)
{
    assert (self);
    return self->$(name);
}

void
$(class.name)_$(name)_set ($(class.name)_t *self, char *format, ...)
{
    //  Format into newly allocated string
    assert (self);
    va_list argptr;
    va_start (argptr, format);
    free (self->$(name));
    self->$(name) = (char *) malloc (255 + 1);
    assert (self->$(name));
    vsnprintf (self->$(name), 255, format, argptr);
    va_end (argptr);
}

.   elsif type = "frame"
//  --------------------------------------------------------------------------
//  Get/set the $(name) field

zframe_t *
$(class.name)_$(name) ($(class.name)_t *self)
{
    assert (self);
    return self->$(name);
}

//  Takes ownership of supplied frame
void
$(class.name)_$(name)_set ($(class.name)_t *self, zframe_t *frame)
{
    assert (self);
    if (self->$(name))
        zframe_destroy (&self->$(name));
    self->$(name) = frame;
}
.   endif

.endfor

//  --------------------------------------------------------------------------
//  Selftest

int
$(class.name)_test (bool verbose)
{
    printf (" * $(class.name): ");

    //  Simple create/destroy test
.if class.uses_ids ?= 1
    $(class.name)_t *self = $(class.name)_new (0);
.else
    $(class.name)_t *self = $(class.name)_new ();
.endif
    assert (self);
    $(class.name)_destroy (&self);

    //  Create pair of sockets we can send through
    zctx_t *ctx = zctx_new ();
    assert (ctx);

    void *output = zsocket_new (ctx, ZMQ_DEALER);
    assert (output);
    zsocket_bind (output, "inproc://selftest");
    void *input = zsocket_new (ctx, ZMQ_ROUTER);
    assert (input);
    zsocket_connect (input, "inproc://selftest");

    //  Encode/send/decode and verify each message type
.if class.uses_ids ?= 1
.   for class.message

    self = $(class.name)_new ($(CLASS.NAME)_$(MESSAGE.NAME));
.       for field where !defined (value)
.           if type = "octet"
    $(class.name)_$(name)_set (self, 123);
.           elsif type = "string"
    $(class.name)_$(name)_set (self, "Life is short but Now lasts for ever");
.           elsif type = "frame"
    $(class.name)_$(name)_set (self, zframe_new ("Captcha Diem", 12));
.           endif
.       endfor
    $(class.name)_send (&self, output);

    self = $(class.name)_recv (input);
    assert (self);
.       for field where !defined (value)
.           if type = "octet"
    assert ($(class.name)_$(name) (self) == 123);
.           elsif type = "string"
    assert (streq ($(class.name)_$(name) (self), "Life is short but Now lasts for ever"));
.           elsif type = "frame"
    assert (zframe_streq ($(class.name)_$(name) (self), "Captcha Diem"));
.           endif
.       endfor
    $(class.name)_destroy (&self);
.   endfor
.else
    self = $(class.name)_new ();
.   for class->message.field
.       if type = "octet"
    $(class.name)_$(name)_set (self, 123);
.       elsif type = "string"
    $(class.name)_$(name)_set (self, "Life is short but Now lasts for ever");
.       elsif type = "frame"
    $(class.name)_$(name)_set (self, zframe_new ("Captcha Diem", 12));
.       endif
.   endfor
    $(class.name)_send (&self, output);

    self = $(class.name)_recv (input);
    assert (self);
.   for class->message.field
.       if type = "octet"
    assert ($(class.name)_$(name) (self) == 123);
.       elsif type = "string"
    assert (streq ($(class.name)_$(name) (self), "Life is short but Now lasts for ever"));
.       elsif type = "frame"
    assert (zframe_streq ($(class.name)_$(name) (self), "Captcha Diem"));
.       endif
.   endfor
    $(class.name)_destroy (&self);
.endif

    zctx_destroy (&ctx);
    printf ("OK\\n");
    return 0;
}
