defmodule Mtserver do
  @moduledoc """
  Generated by erl2ex (http://github.com/dazuma/erl2ex)
  From Erlang source: (Unknown source file)
  At: 2019-12-20 13:57:29

  """

  def worker_routine(context) do
    {:ok, receiver} = :erlzmq.socket(context, :rep)
    :ok = :erlzmq.connect(receiver, 'inproc://workers')
    worker_loop(receiver)
    :ok = :erlzmq.close(receiver)
  end


  def worker_loop(receiver) do
    {:ok, msg} = :erlzmq.recv(receiver)
    :io.format('Received ~s [~p]~n', [msg, self()])
    :timer.sleep(1000)
    :erlzmq.send(receiver, "World")
    worker_loop(receiver)
  end


  def main() do
    {:ok, context} = :erlzmq.context()
    {:ok, clients} = :erlzmq.socket(context, [:router, {:active, true}])
    :ok = :erlzmq.bind(clients, 'tcp://*:5555')
    {:ok, workers} = :erlzmq.socket(context, [:dealer, {:active, true}])
    :ok = :erlzmq.bind(workers, 'inproc://workers')
    start_workers(context, 5)
    :erlzmq_device.queue(clients, workers)
    :ok = :erlzmq.close(clients)
    :ok = :erlzmq.close(workers)
    :ok = :erlzmq.term(context)
  end


  def start_workers(_context, 0) do
    :ok
  end

  def start_workers(context, n) when n > 0 do
    :erlang.spawn(fn -> worker_routine(context) end)
    start_workers(context, n - 1)
  end

end

Mtserver.main
