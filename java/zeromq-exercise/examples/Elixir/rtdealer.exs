defmodule Rtdealer do
  @moduledoc """
  Generated by erl2ex (http://github.com/dazuma/erl2ex)
  From Erlang source: (Unknown source file)
  At: 2019-12-20 13:57:32

  """

  def worker_task(id) do
    {:ok, context} = :erlzmq.context()
    {:ok, worker} = :erlzmq.socket(context, :dealer)
    :ok = :erlzmq.setsockopt(worker, :identity, id)
    :ok = :erlzmq.connect(worker, 'ipc://routing.ipc')
    count = count_messages(worker, 0)
    :io.format('~s received: ~b~n', [id, count])
    :ok = :erlzmq.close(worker)
    :ok = :erlzmq.term(context)
  end


  def count_messages(socket, count) do
    case(:erlzmq.recv(socket)) do
      {:ok, "END"} ->
        count
      {:ok, _} ->
        count_messages(socket, count + 1)
    end
  end


  def main() do
    {:ok, context} = :erlzmq.context()
    {:ok, client} = :erlzmq.socket(context, :router)
    :ok = :erlzmq.bind(client, 'ipc://routing.ipc')
    :erlang.spawn(fn -> worker_task("A") end)
    :erlang.spawn(fn -> worker_task("B") end)
    :timer.sleep(1000)
    :lists.foreach(fn num ->
      case(rem(num, 3)) do
        0 ->
          :ok = :erlzmq.send(client, "B", [:sndmore])
        _ ->
          :ok = :erlzmq.send(client, "A", [:sndmore])
      end
        :ok = :erlzmq.send(client, "Workload")
    end, :lists.seq(1, 10))
    :ok = :erlzmq.send(client, "A", [:sndmore])
    :ok = :erlzmq.send(client, "END")
    :ok = :erlzmq.send(client, "B", [:sndmore])
    :ok = :erlzmq.send(client, "END")
    :timer.sleep(100)
    :ok = :erlzmq.close(client)
    :ok = :erlzmq.term(context)
  end

end

Rtdealer.main
