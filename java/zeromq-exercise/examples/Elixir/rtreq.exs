defmodule Rtreq do
  @moduledoc """
  Generated by erl2ex (http://github.com/dazuma/erl2ex)
  From Erlang source: (Unknown source file)
  At: 2019-12-20 13:57:33

  """

  defmacrop erlconst_NBR_WORKERS() do
    quote do
      10
    end
  end


  def worker_task() do
    :random.seed(:erlang.now())
    {:ok, context} = :erlzmq.context()
    {:ok, worker} = :erlzmq.socket(context, :req)
    :ok = :erlzmq.setsockopt(worker, :identity, :erlang.pid_to_list(self()))
    :ok = :erlzmq.connect(worker, 'ipc://routing.ipc')
    total = handle_tasks(worker, 0)
    :io.format('Processed ~b tasks~n', [total])
    :erlzmq.close(worker)
    :erlzmq.term(context)
  end


  def handle_tasks(worker, taskCount) do
    :ok = :erlzmq.send(worker, "ready")
    case(:erlzmq.recv(worker)) do
      {:ok, "END"} ->
        taskCount
      {:ok, _} ->
        :timer.sleep(:random.uniform(1000) + 1)
        handle_tasks(worker, taskCount + 1)
    end
  end


  def main() do
    {:ok, context} = :erlzmq.context()
    {:ok, client} = :erlzmq.socket(context, :router)
    :ok = :erlzmq.bind(client, 'ipc://routing.ipc')
    start_workers(erlconst_NBR_WORKERS())
    route_work(client, erlconst_NBR_WORKERS() * 10)
    stop_workers(client, erlconst_NBR_WORKERS())
    :ok = :erlzmq.close(client)
    :ok = :erlzmq.term(context)
  end


  def start_workers(0) do
    :ok
  end

  def start_workers(n) when n > 0 do
    :erlang.spawn(fn -> worker_task() end)
    start_workers(n - 1)
  end


  def route_work(_client, 0) do
    :ok
  end

  def route_work(client, n) when n > 0 do
    {:ok, address} = :erlzmq.recv(client)
    {:ok, <<>>} = :erlzmq.recv(client)
    {:ok, "ready"} = :erlzmq.recv(client)
    :ok = :erlzmq.send(client, address, [:sndmore])
    :ok = :erlzmq.send(client, <<>>, [:sndmore])
    :ok = :erlzmq.send(client, "This is the workload")
    route_work(client, n - 1)
  end


  def stop_workers(_client, 0) do
    :ok
  end

  def stop_workers(client, n) do
    {:ok, address} = :erlzmq.recv(client)
    {:ok, <<>>} = :erlzmq.recv(client)
    {:ok, _ready} = :erlzmq.recv(client)
    :ok = :erlzmq.send(client, address, [:sndmore])
    :ok = :erlzmq.send(client, <<>>, [:sndmore])
    :ok = :erlzmq.send(client, "END")
    stop_workers(client, n - 1)
  end

end

Rtreq.main
